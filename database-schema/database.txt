CREATE TABLE admin (
    admin_id SERIAL PRIMARY KEY,
    staff_type_id INTEGER REFERENCES staff_type(staff_type_id),
    role_id INTEGER REFERENCES role(role_id),
    admin_name CHARACTER VARYING(50),
    admin_surname CHARACTER VARYING(50),
    admin_email CHARACTER VARYING(50),
    admin_password CHARACTER VARYING(140),
    admin_address CHARACTER VARYING(50),
    admin_phone CHARACTER VARYING(50),
    admin_fax CHARACTER VARYING(50),
    admin_gender CHARACTER VARYING(6),
    admin_birth_date DATE,
    admin_emso CHARACTER VARYING(50),
    admin_pay BIGINT,
    admin_start_date DATE,
    admin_avatar CHARACTER VARYING(50)
);

CREATE TABLE owner (
    owner_id SERIAL PRIMARY KEY,
    owner_name CHARACTER VARYING(20)
);

CREATE TABLE role (
    role_id SERIAL PRIMARY KEY,
    role_name CHARACTER VARYING(50)
);

CREATE TABLE secretary (
    secretary_id SERIAL PRIMARY KEY,
    secretary_name CHARACTER VARYING(50),
    secretary_surname CHARACTER VARYING(50),
    secretary_writing_speed BIGINT
);

CREATE TABLE staff_type (
    staff_type_id SERIAL PRIMARY KEY,
    staff_type_name CHARACTER VARYING(50)
);

CREATE TABLE company (
    company_id SERIAL PRIMARY KEY,
    owner_id INTEGER REFERENCES owner(owner_id),
    company_name CHARACTER VARYING(50),
    company_industry CHARACTER VARYING(50),
    company_address CHARACTER VARYING(50),
    company_phone CHARACTER VARYING(50),
    company_fax CHARACTER VARYING(50),
    company_contact_person CHARACTER VARYING(50)
);

CREATE TABLE individual (
    individual_id SERIAL PRIMARY KEY,
    owner_id INTEGER,
    individual_name CHARACTER VARYING(50),
    individual_surname CHARACTER VARYING(50),
    individual_address CHARACTER VARYING(50),
    individual_phone CHARACTER VARYING(50),
    FOREIGN KEY (owner_id) REFERENCES owner(owner_id)
);

CREATE TABLE manager (
    manager_id SERIAL PRIMARY KEY,
    role_id INTEGER,
    staff_type_id INTEGER,
    manager_name CHARACTER VARYING(50),
    manager_surname CHARACTER VARYING(50),
    manager_address CHARACTER VARYING(50),
    manager_phone CHARACTER VARYING(50),
    manager_fax CHARACTER VARYING(50),
    manager_gender CHARACTER VARYING(6),
    manager_birth_date DATE,
    manager_emso CHARACTER VARYING(50),
    manager_pay BIGINT,
    manager_start_date DATE,
    manager_became_date DATE,
    manager_avatar CHARACTER VARYING(50),
    FOREIGN KEY (role_id) REFERENCES role(role_id),
    FOREIGN KEY (staff_type_id) REFERENCES staff_type(staff_type_id)
);

CREATE TABLE manager_additional_pay (
    manager_additional_pay_id SERIAL PRIMARY KEY,
    manager_id INTEGER,
    additional_pay_amount BIGINT,
    FOREIGN KEY (manager_id) REFERENCES manager(manager_id)
);

CREATE TABLE manager_auto (
    manager_auto_id SERIAL PRIMARY KEY,
    manager_id INTEGER,
    manager_auto_name CHARACTER VARYING(50),
    manager_auto_km BIGINT,
    FOREIGN KEY (manager_id) REFERENCES manager(manager_id)
);

CREATE TABLE staff_group (
    staff_group_id SERIAL PRIMARY KEY,
    manager_id INTEGER,
    secretary_id INTEGER,
    FOREIGN KEY (manager_id) REFERENCES manager(manager_id),
    FOREIGN KEY (secretary_id) REFERENCES secretary(secretary_id)
);

CREATE TABLE users (
    user_id SERIAL PRIMARY KEY,
    role_id INTEGER,
    user_name_surname CHARACTER VARYING(50),
    user_address CHARACTER VARYING(50),
    user_phone CHARACTER VARYING(50),
    user_fax CHARACTER VARYING(50),
    user_estate_type CHARACTER VARYING(50),
    user_space BIGINT,
    user_max_rent BIGINT,
    user_email CHARACTER VARYING(50),
    user_password CHARACTER VARYING(140),
    user_avatar CHARACTER VARYING(50),
    user_created_at DATE,
    FOREIGN KEY (role_id) REFERENCES role(role_id)
);

CREATE TABLE chat_types (
    chat_types_id SERIAL PRIMARY KEY,
    chat_type_name CHARACTER VARYING(50)
);

CREATE TABLE staff (
    staff_id SERIAL PRIMARY KEY,
    staff_type_id INTEGER,
    staff_group_id INTEGER,
    role_id INTEGER,
    staff_name CHARACTER VARYING(50),
    staff_surname CHARACTER VARYING(50),
    staff_email CHARACTER VARYING(50),
    staff_password CHARACTER VARYING(140),
    staff_address CHARACTER VARYING(50),
    staff_phone CHARACTER VARYING(50),
    staff_fax CHARACTER VARYING(50),
    staff_gender CHARACTER VARYING(6),
    staff_birth_date DATE,
    staff_emso CHARACTER VARYING(50),
    staff_pay BIGINT,
    staff_start_date DATE,
    staff_avatar CHARACTER VARYING(50),
    FOREIGN KEY (staff_type_id) REFERENCES staff_type(staff_type_id),
    FOREIGN KEY (staff_group_id) REFERENCES staff_group(staff_group_id),
    FOREIGN KEY (role_id) REFERENCES role(role_id)
);


CREATE TABLE chat (
    chat_id SERIAL PRIMARY KEY,
    chat_types_id INTEGER,
    user_id INTEGER,
    staff_id INTEGER,
    chat_last_message CHARACTER VARYING(150),
    FOREIGN KEY (chat_types_id) REFERENCES chat_types(chat_types_id),
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (staff_id) REFERENCES staff(staff_id)
);

CREATE TABLE estate (
    estate_id SERIAL PRIMARY KEY,
    owner_id INTEGER,
    staff_group_id INTEGER,
    estate_address CHARACTER VARYING(50),
    estate_type CHARACTER VARYING(50),
    estate_bedrooms BIGINT,
    estate_square_footage BIGINT,
    estate_rent BIGINT,
    estate_images CHARACTER VARYING(50),
    estate_city CHARACTER VARYING(50),
    estate_bathrooms BIGINT,
    estate_latitude BIGINT,
    estate_longitude BIGINT,
    estate_property CHARACTER VARYING(50),
    FOREIGN KEY (owner_id) REFERENCES owner(owner_id),
    FOREIGN KEY (staff_group_id) REFERENCES staff_group(staff_group_id)
);

CREATE TABLE interview (
    interview_id SERIAL PRIMARY KEY,
    staff_id INTEGER,
    interview_date DATE,
    interview_comments TEXT,
    user_id INTEGER,
    FOREIGN KEY (staff_id) REFERENCES staff(staff_id),
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);

CREATE TABLE message (
    message_id SERIAL PRIMARY KEY,
    chat_id INTEGER,
    user_id INTEGER,
    staff_id INTEGER,
    message_text TEXT,
    message_created_at DATE,
    FOREIGN KEY (chat_id) REFERENCES chat(chat_id),
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (staff_id) REFERENCES staff(staff_id)
);

CREATE TABLE office_branch (
    office_branch_id SERIAL PRIMARY KEY,
    staff_group_id INTEGER,
    office_street_name CHARACTER VARYING(50),
    office_street_number CHARACTER VARYING(50),
    office_municipality CHARACTER VARYING(50),
    office_city CHARACTER VARYING(50),
    office_postcode CHARACTER VARYING(20),
    office_phone CHARACTER VARYING(50),
    office_fax CHARACTER VARYING(50),
    manager_id INTEGER,
    FOREIGN KEY (staff_group_id) REFERENCES staff_group(staff_group_id),
    FOREIGN KEY (manager_id) REFERENCES manager(manager_id)
);

CREATE TABLE post (
    post_id SERIAL PRIMARY KEY,
    office_branch_id INTEGER,
    staff_id INTEGER,
    estate_id INTEGER,
    post_title CHARACTER VARYING(50),
    post_created_at DATE,
    FOREIGN KEY (office_branch_id) REFERENCES office_branch(office_branch_id),
    FOREIGN KEY (staff_id) REFERENCES staff(staff_id),
    FOREIGN KEY (estate_id) REFERENCES estate(estate_id)
);

CREATE TABLE post_details (
    post_details_id SERIAL PRIMARY KEY,
    post_id INTEGER,
    post_details_desc CHARACTER VARYING(50),
    post_details_utilities CHARACTER VARYING(50),
    post_details_pets CHARACTER VARYING(50),
    post_details_income CHARACTER VARYING(50),
    post_details_size BIGINT,
    post_details_school BIGINT,
    post_details_bus BIGINT,
    post_details_restaurant BIGINT,
    FOREIGN KEY (post_id) REFERENCES post(post_id)
);

CREATE TABLE relative (
    relative_id SERIAL PRIMARY KEY,
    staff_id INTEGER,
    relative_name CHARACTER VARYING(50),
    relative_surname CHARACTER VARYING(50),
    relative_phone CHARACTER VARYING(50),
    relative_address CHARACTER VARYING(50),
    relative_relation CHARACTER VARYING(50),
    FOREIGN KEY (staff_id) REFERENCES staff(staff_id)
);

CREATE TABLE saved_post (
    saved_post_id SERIAL PRIMARY KEY,
    post_id INTEGER,
    user_id INTEGER,
    saved_post_created_at DATE,
    FOREIGN KEY (post_id) REFERENCES post(post_id),
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);

CREATE TABLE estate_images (
    image_id SERIAL PRIMARY KEY,
    image_url CHARACTER VARYING(140),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

INSERT INTO chat_types (chat_types_id, chat_type_name) VALUES
(1, 'Private Chat'),
(2, 'Direct Message'),
(3, 'Help Message'),
(4, 'New Message');

SELECT * FROM chat_types;

INSERT INTO owner (owner_name) VALUES
('Individual'),
('Company');

SELECT * FROM owner;

INSERT INTO role (role_name) VALUES
('admin'),
('staff'),
('manager'),
('user');

SELECT * FROM role;

INSERT INTO secretary (secretary_name, secretary_surname, secretary_writing_speed) VALUES
('Emily', 'Smith', 85),
('James', 'Johnson', 90),
('Sophia', 'Williams', 80);

SELECT * FROM secretary;

INSERT INTO staff_type (staff_type_name) VALUES
('admin'),
('manager'),
('agent');

SELECT * FROM staff_type;

INSERT INTO company (owner_id, company_name, company_industry, company_address, company_phone, company_fax, company_contact_person) VALUES
(5, 'ABC Corporation', 'Technology', '123 Main St, Anytown', '+123456789', '+123456789', 'John Smith'),
(5, 'XYZ Enterprises', 'Finance', '456 Oak Ave, Somecity', '+987654321', '+987654321', 'Jane Doe'),
(5, 'PQR Industries', 'Manufacturing', '789 Elm Blvd, Othertown', '+246813579', '+246813579', 'Mike Johnson');

SELECT * FROM company;

INSERT INTO individual (owner_id, individual_name, individual_surname, individual_address, individual_phone) VALUES
(4, 'John', 'Doe', '123 Oak St, Anytown', '+123456789'),
(4, 'Jane', 'Smith', '456 Pine Ave, Somecity', '+987654321'),
(4, 'Michael', 'Brown', '789 Elm Blvd, Othertown', '+246813579');

SELECT * FROM individual;

INSERT INTO manager (role_id, staff_type_id, manager_name, manager_surname, manager_address, manager_phone, manager_fax, manager_gender, manager_birth_date, manager_emso, manager_pay, manager_start_date, manager_became_date, manager_avatar) VALUES
(2, 2, 'John', 'Doe', '123 Main St', '555-1234', '555-5678', 'Male', '1980-05-15', '1234567890123', 60000, '2020-01-15', '2020-01-15', 'john_avatar.jpg'),
(2, 2, 'Jane', 'Smith', '456 Elm St', '555-4321', '555-8765', 'Female', '1982-10-25', '9876543210987', 65000, '2019-08-20', '2019-08-20', 'jane_avatar.jpg');

INSERT INTO manager (role_id, staff_type_id, manager_name, manager_surname, manager_address, manager_phone, manager_fax, manager_gender, manager_birth_date, manager_emso, manager_pay, manager_start_date, manager_became_date, manager_avatar) VALUES
(3, 2, 'Michael', 'Johnson', '789 Oak St', '555-1111', '555-2222', 'Male', '1985-07-20', '5432109876543', 62000, '2021-03-10', '2021-03-10', 'michael_avatar.jpg'),
(3, 2, 'Emily', 'Brown', '890 Pine St', '555-9999', '555-8888', 'Female', '1987-04-12', '6543210987654', 63000, '2022-05-05', '2022-05-05', 'emily_avatar.jpg');

SELECT * FROM manager;

INSERT INTO manager_additional_pay (manager_id, additional_pay_amount) VALUES
(1, 5000),
(2, 3000),
(1, 2000),
(2, 4000);

SELECT * FROM manager_additional_pay;

INSERT INTO manager_auto (manager_id, manager_auto_name, manager_auto_km) VALUES
(1, 'Manager Car', 15000),
(1, 'Manager SUV', 20000),
(2, 'Executive Car', 18000),
(2, 'Luxury Sedan', 25000);

SELECT * FROM manager_auto;

INSERT INTO staff_group (manager_id, secretary_id) VALUES
(1, 1),
(2, 2);

SELECT * FROM staff_group;

INSERT INTO estate (owner_id, staff_group_id, estate_address, estate_type, estate_bedrooms, estate_square_footage, estate_rent, estate_images, estate_city, estate_bathrooms, estate_latitude, estate_longitude, estate_property) VALUES
(4, 9, '123 Oak St', 'House', 3, 200, 1200, 'house1.jpg', 'Anytown', 2, 40.7128, -74.0060, 'Residential'),
(5, 10, '456 Pine Ave', 'Apartment', 2, 150, 900, 'apt1.jpg', 'Somecity', 1, 34.0522, -118.2437, 'Residential'),
(4, 9, '789 Elm Blvd', 'Villa', 5, 350, 2500, 'villa1.jpg', 'Othertown', 4, 51.5074, -0.1278, 'Luxury'),
(5, 10, '321 Maple Ln', 'House', 4, 300, 1800, 'house2.jpg', 'Anytown', 3, 40.7128, -74.0060, 'Residential'),
(4, 9, '654 Cedar Rd', 'Apartment', 1, 100, 700, 'apt2.jpg', 'Somecity', 1, 34.0522, -118.2437, 'Residential'),
(5, 10, '987 Birch Ave', 'House', 3, 220, 1400, 'house3.jpg', 'Othertown', 2, 51.5074, -0.1278, 'Residential'),
(4, 9, '741 Elm St', 'Villa', 6, 400, 3000, 'villa2.jpg', 'Anytown', 5, 40.7128, -74.0060, 'Luxury'),
(5, 10, '852 Pine Rd', 'House', 2, 180, 1100, 'house4.jpg', 'Somecity', 1, 34.0522, -118.2437, 'Residential'),
(4, 9, '369 Oak Ave', 'Apartment', 1, 120, 800, 'apt3.jpg', 'Othertown', 1, 51.5074, -0.1278, 'Residential'),
(5, 10, '147 Maple Blvd', 'House', 4, 320, 2000, 'house5.jpg', 'Anytown', 3, 40.7128, -74.0060, 'Residential');

SELECT * FROM estate;

INSERT INTO users (role_id, user_name_surname, user_address, user_phone, user_fax, user_estate_type, user_space, user_max_rent, user_email, user_password, user_avatar, user_created_at) VALUES
(4, 'John Doe', '123 Elm St', '555-1234', '555-5678', 'Apartment', 1000, 1500, 'john.doe@example.com', 'hashed_password_123', 'avatar_john.jpg', '2023-01-15'),
(4, 'Jane Smith', '456 Oak Ave', '555-4321', '555-8765', 'House', 2000, 2000, 'jane.smith@example.com', 'hashed_password_456', 'avatar_jane.jpg', '2023-01-20');

SELECT * FROM users;

INSERT INTO staff (staff_type_id, staff_group_id, role_id, staff_name, staff_surname, staff_email, staff_password, staff_address, staff_phone, staff_fax, staff_gender, staff_birth_date, staff_emso, staff_pay, staff_start_date, staff_avatar) VALUES
(2, 9, 2, 'John', 'Doe', 'john.doe@example.com', 'hashed_password_1', '123 Main St', '+123456789', '+123456789', 'Male', '1990-05-15', '90051512345', 50000, '2020-01-01', 'avatar1.jpg'),
(3, 10, 1, 'Jane', 'Smith', 'jane.smith@example.com', 'hashed_password_2', '456 Elm St', '+987654321', '+987654321', 'Female', '1988-09-20', '88092023456', 60000, '2018-03-10', 'avatar2.jpg'),
(1, 9, 3, 'Michael', 'Johnson', 'michael.johnson@example.com', 'hashed_password_3', '789 Oak St', '+111222333', '+111222333', 'Male', '1995-11-30', '95113034567', 55000, '2019-07-15', 'avatar3.jpg'),
(2, 10, 2, 'Emily', 'Brown', 'emily.brown@example.com', 'hashed_password_4', '321 Pine St', '+444555666', '+444555666', 'Female', '1992-04-25', '92042545678', 58000, '2020-02-20', 'avatar4.jpg'),
(3, 9, 1, 'David', 'Wilson', 'david.wilson@example.com', 'hashed_password_5', '654 Maple St', '+777888999', '+777888999', 'Male', '1987-07-12', '87071256789', 62000, '2017-05-05', 'avatar5.jpg');

SELECT * FROM staff;

INSERT INTO chat (chat_types_id, user_id, staff_id, chat_last_message) VALUES
(1, 1, 6, 'Hello, how can I help you today?'),
(2, 2, 7, 'Sure, I will check that for you.'),
(1, 1, 8, 'Please provide more details about your issue.'),
(3, 2, 9, 'The order has been processed successfully.'),
(2, 1, 7, 'I have forwarded your request to the support team.'),
(1, 2, 8, 'Thank you for your patience.'),
(3, 1, 9, 'Your account has been upgraded.'),
(1, 2, 6, 'I will escalate this issue to our technical team.'),
(2, 1, 6, 'Could you please confirm your account number?'),
(1, 2, 7, 'The shipment will arrive by Friday.');

SELECT * FROM chat;

INSERT INTO interview (staff_id, interview_date, interview_comments, user_id) VALUES
(7, '2023-05-10', 'Candidate showed good communication skills and technical knowledge.', 1),
(8, '2023-04-25', 'Candidate demonstrated strong leadership qualities and problem-solving skills.', 2);

SELECT * FROM interview;

INSERT INTO message (chat_id, user_id, staff_id, message_text, message_created_at) VALUES
(41, 1, 6, 'Hello, how can I assist you today?', '2023-05-10'),
(41, 1, 7, 'I have a question about the rental properties listed.', '2023-05-11'),
(42, 2, 8, 'Could you provide more details about the facilities?', '2023-04-25'),
(42, 2, 8, 'Certainly! Our properties have modern amenities and spacious interiors.', '2023-04-26');

SELECT * FROM message;

INSERT INTO office_branch (staff_group_id, office_street_name, office_street_number, office_municipality, office_city, office_postcode, office_phone, office_fax, manager_id) VALUES
(9, 'Main Street', '123', 'Central Municipality', 'Metropolis', '12345', '+1234567890', '+1234567891', 1),
(10, 'Oak Avenue', '456', 'Suburbia Municipality', 'Townsville', '67890', '+9876543210', '+9876543211', 2);


SELECT * FROM office_branch;

INSERT INTO post (office_branch_id, staff_id, estate_id, post_title, post_created_at) VALUES
(1, 6, 21, 'Luxury Apartment for Rent', '2024-06-17'),
(2, 7, 22, 'Spacious Family Home', '2024-06-16');

SELECT * FROM post;

INSERT INTO post_details (post_id, post_details_desc, post_details_utilities, post_details_pets, post_details_income, post_details_size, post_details_school, post_details_bus, post_details_restaurant) VALUES
(6, 'Luxury apartment in prime location', 'Fully equipped kitchen, laundry room', 'Pets allowed', 'Monthly income verification required', 120, 2, 1, 5),
(7, 'Spacious home with garden', 'Garage, central heating', 'No pets allowed', 'Proof of stable income needed', 200, 3, 2, 3);

SELECT * FROM post_details;

INSERT INTO saved_post (post_id, user_id, saved_post_created_at) VALUES
(6, 1, '2023-05-15'),
(7, 2, '2023-05-16');

SELECT * FROM saved_post;

INSERT INTO relative (staff_id, relative_name, relative_surname, relative_phone, relative_address, relative_relation) VALUES
(6, 'John', 'Smith', '123-456-7890', '123 Main St', 'Father'),
(7, 'Jane', 'Doe', '456-789-0123', '456 Elm St', 'Mother'),
(8, 'Michael', 'Johnson', '789-012-3456', '789 Oak St', 'Brother'),
(9, 'Emily', 'Davis', '234-567-8901', '234 Pine St', 'Sister'),
(10, 'William', 'Brown', '567-890-1234', '567 Maple St', 'Cousin');

SELECT * FROM relative;

INSERT INTO admin (staff_type_id, role_id, admin_name, admin_surname, admin_email, admin_password, admin_address, admin_phone, admin_fax, admin_gender, admin_birth_date, admin_emso, admin_pay, admin_start_date, admin_avatar)
VALUES
(1, 1, 'Michael', 'Smith', 'michael@example.com', 'hashed_password', '123 Admin St', '555-1234', '555-5678', 'Male', '1980-05-15', '1234567890123', 70000, '2020-01-15', 'michael_avatar.jpg'),
(1, 1, 'Emma', 'Johnson', 'emma@example.com', 'hashed_password', '456 Admin St', '555-4321', '555-8765', 'Female', '1982-10-25', '9876543210987', 72000, '2019-08-20', 'emma_avatar.jpg');

SELECT * FROM admin;

--FUNCTIONS
CREATE OR REPLACE FUNCTION insert_message(
    p_chat_id INT,
    p_user_id INT,
    p_staff_id INT,
    p_message_text TEXT,
    p_message_created_at TIMESTAMP
)
RETURNS VOID AS $$
BEGIN
    INSERT INTO message (chat_id, user_id, staff_id, message_text, message_created_at)
    VALUES (p_chat_id, p_user_id, p_staff_id, p_message_text, p_message_created_at);
END;
$$ LANGUAGE plpgsql;

SELECT insert_message(43, 1, 6, 'Hello, how can I assist you today?', '2023-05-10');

CREATE OR REPLACE FUNCTION insert_staff(
    p_staff_type_id INT,
    p_staff_group_id INT,
    p_role_id INT,
    p_staff_name VARCHAR,
    p_staff_surname VARCHAR,
    p_staff_email VARCHAR,
    p_staff_password VARCHAR,
    p_staff_address VARCHAR,
    p_staff_phone VARCHAR,
    p_staff_fax VARCHAR,
    p_staff_gender VARCHAR,
    p_staff_birth_date DATE,
    p_staff_emso VARCHAR,
    p_staff_pay NUMERIC,
    p_staff_start_date DATE,
    p_staff_avatar VARCHAR
)
RETURNS VOID AS $$
BEGIN
    INSERT INTO staff (
        staff_type_id, staff_group_id, role_id, staff_name, staff_surname, staff_email, staff_password, staff_address, staff_phone, staff_fax, staff_gender, staff_birth_date, staff_emso, staff_pay, staff_start_date, staff_avatar
    ) VALUES (
        p_staff_type_id, p_staff_group_id, p_role_id, p_staff_name, p_staff_surname, p_staff_email, p_staff_password, p_staff_address, p_staff_phone, p_staff_fax, p_staff_gender, p_staff_birth_date, p_staff_emso, p_staff_pay, p_staff_start_date, p_staff_avatar
    );
END;
$$ LANGUAGE plpgsql;

SELECT insert_staff(2, 9, 2, 'John', 'Doe', 'john.doe@example.com', 'hashed_password_1', '123 Main St', '+123456789', '+123456789', 'Male', '1990-05-15', '90051512345', 50000, '2020-01-01', 'avatar1.jpg');

CREATE OR REPLACE FUNCTION insert_estate(
    p_owner_id INT,
    p_staff_group_id INT,
    p_estate_address VARCHAR,
    p_estate_type VARCHAR,
    p_estate_bedrooms INT,
    p_estate_square_footage INT,
    p_estate_rent NUMERIC,
    p_estate_images VARCHAR,
    p_estate_city VARCHAR,
    p_estate_bathrooms INT,
    p_estate_latitude NUMERIC,
    p_estate_longitude NUMERIC,
    p_estate_property VARCHAR
)
RETURNS VOID AS $$
BEGIN
    INSERT INTO estate (
        owner_id, staff_group_id, estate_address, estate_type, estate_bedrooms, estate_square_footage, estate_rent, estate_images, estate_city, estate_bathrooms, estate_latitude, estate_longitude, estate_property
    ) VALUES (
        p_owner_id, p_staff_group_id, p_estate_address, p_estate_type, p_estate_bedrooms, p_estate_square_footage, p_estate_rent, p_estate_images, p_estate_city, p_estate_bathrooms, p_estate_latitude, p_estate_longitude, p_estate_property
    );
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION insert_manager_auto(
    p_manager_id INT,
    p_manager_auto_name VARCHAR,
    p_manager_auto_km INT
)
RETURNS VOID AS $$
BEGIN
    INSERT INTO manager_auto (manager_id, manager_auto_name, manager_auto_km)
    VALUES (p_manager_id, p_manager_auto_name, p_manager_auto_km);
END;
$$ LANGUAGE plpgsql;

SELECT insert_manager_auto(1, 'Manager Car', 15000);

CREATE OR REPLACE FUNCTION insert_manager(
    p_role_id INT,
    p_staff_type_id INT,
    p_manager_name VARCHAR,
    p_manager_surname VARCHAR,
    p_manager_address VARCHAR,
    p_manager_phone VARCHAR,
    p_manager_fax VARCHAR,
    p_manager_gender VARCHAR,
    p_manager_birth_date DATE,
    p_manager_emso VARCHAR,
    p_manager_pay NUMERIC,
    p_manager_start_date DATE,
    p_manager_became_date DATE,
    p_manager_avatar VARCHAR
)
RETURNS VOID AS $$
BEGIN
    INSERT INTO manager (
        role_id, staff_type_id, manager_name, manager_surname, manager_address, manager_phone, manager_fax, manager_gender, manager_birth_date, manager_emso, manager_pay, manager_start_date, manager_became_date, manager_avatar
    ) VALUES (
        p_role_id, p_staff_type_id, p_manager_name, p_manager_surname, p_manager_address, p_manager_phone, p_manager_fax, p_manager_gender, p_manager_birth_date, p_manager_emso, p_manager_pay, p_manager_start_date, p_manager_became_date, p_manager_avatar
    );
END;
$$ LANGUAGE plpgsql;

SELECT insert_manager(2, 2, 'John', 'Doe', '123 Main St', '555-1234', '555-5678', 'Male', '1980-05-15', '1234567890123', 60000, '2020-01-15', '2020-01-15', 'john_avatar.jpg');

ALTER TABLE estate ADD COLUMN image_id INTEGER;

ALTER TABLE estate DROP COLUMN estate_images;

ALTER TABLE estate
ADD CONSTRAINT fk_estate_images
FOREIGN KEY (image_id) REFERENCES estate_images(image_id)
    ON DELETE SET NULL
    ON UPDATE CASCADE;

--Opredelitev skupinskih in uporabniških vlog ter dodelitev pravic skupinskim vlogam (CREATE ROLE, GRANT ...)
-- 1. korak: Ustvarjanje skupinskih vlog
CREATE ROLE admins;
CREATE ROLE managers;
CREATE ROLE staff;


-- 2. korak: Ustvarjanje uporabniških vlog
CREATE ROLE Aljaz LOGIN PASSWORD 'passwordl';
CREATE ROLE Aspasija LOGIN PASSWORD 'password2';
CREATE ROLE Andrej LOGIN PASSWORD 'password3';


-- Korak 3: Dodelitev pravic vlogam skupin
-- Dodelitev privilegijev administratorjem
GRANT ALL PRIVILEGES ON DATABASE a_real_estate_20240605 TO admins;
GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO admins;


-- podelitev privilegijev veterinarjem
GRANT SELECT, INSERT, UPDATE ON chat, estate, post, post_details TO managers;


-- Dodelitev privilegijev lastnikom
GRANT SELECT, INSERT, UPDATE, DELETE ON chat, estate, message, estate_images TO staff;


-- 4. korak: Dodelitev uporabnikov skupinskim vlogam
GRANT admins TO Aljaz;
GRANT managers TO Aspasija;
GRANT staff TO Andrej;

--Statistične strežniške funkcije
--Povprečno plačilo za administratorja
SELECT role.role_name, AVG(admin.admin_pay) AS average_pay
FROM admin
JOIN role ON admin.role_id = role.role_id
GROUP BY role.role_name;

--Skupno število uporabnikov in osebja
SELECT COUNT(*) AS total_users FROM users;

SELECT COUNT(*) AS total_staff FROM staff;

--Standardni odklon plač osebja
SELECT STDDEV(staff_pay) AS pay_std_dev
FROM staff;

--Srednja hitrost pisanja tajnic
SELECT PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY secretary_writing_speed) AS median_writing_speed
FROM secretary;

--Top 5 najbolje plačanih menedžerjev
SELECT manager_name, manager_surname, manager_pay
FROM manager
ORDER BY manager_pay DESC
LIMIT 5;

--Porazdelitev nepremičnin po mestih
SELECT estate_city, COUNT(*) AS estate_count
FROM estate
GROUP BY estate_city
ORDER BY estate_count DESC;

--Skupna in povprečna najemnina glede na vrsto lastnika (podjetje in posameznik)
SELECT
    CASE
        WHEN estate.owner_id IN (SELECT owner_id FROM company) THEN 'Company'
        WHEN estate.owner_id IN (SELECT owner_id FROM individual) THEN 'Individual'
    END AS owner_type,
    COUNT(*) AS estate_count,
    AVG(estate_rent) AS average_rent,
    SUM(estate_rent) AS total_rent
FROM estate
GROUP BY owner_type;

--Skupno število shranjenih objav na uporabnika
SELECT users.user_name_surname, COUNT(saved_post.saved_post_id) AS saved_post_count
FROM saved_post
JOIN users ON saved_post.user_id = users.user_id
GROUP BY users.user_name_surname
ORDER BY saved_post_count DESC;

--Koraki za ustvarjanje dnevnika sprememb za tabelo administratorja
--Ustvarjanje tabele dnevnika sprememb
CREATE TABLE admin_change_log (
    log_id SERIAL PRIMARY KEY,
    change_type VARCHAR(10), -- 'INSERT', 'UPDATE', 'DELETE'
    admin_id INTEGER,
    changed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    changed_by VARCHAR(50),
    old_values JSONB,
    new_values JSONB
);

--Ustvarjanje funkcije za beleženje sprememb
CREATE OR REPLACE FUNCTION log_admin_changes()
RETURNS TRIGGER AS $$
BEGIN
    IF (TG_OP = 'INSERT') THEN
        INSERT INTO admin_change_log(change_type, admin_id, new_values)
        VALUES ('INSERT', NEW.admin_id, row_to_json(NEW)::jsonb);
    ELSIF (TG_OP = 'UPDATE') THEN
        INSERT INTO admin_change_log(change_type, admin_id, old_values, new_values)
        VALUES ('UPDATE', OLD.admin_id, row_to_json(OLD)::jsonb, row_to_json(NEW)::jsonb);
    ELSIF (TG_OP = 'DELETE') THEN
        INSERT INTO admin_change_log(change_type, admin_id, old_values)
        VALUES ('DELETE', OLD.admin_id, row_to_json(OLD)::jsonb);
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

--Ustvarjanje sprožilcev za klic funkcije za beleženje
CREATE TRIGGER admin_change_trigger
AFTER INSERT OR UPDATE OR DELETE ON admin
FOR EACH ROW EXECUTE FUNCTION log_admin_changes();

--Pregledovanje dnevnika sprememb
--Ogled vseh sprememb
SELECT * FROM admin_change_log ORDER BY changed_at DESC;

--Ogled sprememb za določenega administratorja
SELECT * FROM admin_change_log
WHERE admin_id = 1
ORDER BY changed_at DESC;

--Ogled sprememb določene vrste
SELECT * FROM admin_change_log
WHERE change_type = 'UPDATE'
ORDER BY changed_at DESC;

--Pregledovanje sprememb, narejenih v določenem časovnem okviru
SELECT * FROM admin_change_log
WHERE changed_at BETWEEN '2024-01-01' AND '2024-06-30'
ORDER BY changed_at DESC;

--Dodatne naloge iz seminarske
--Odpiranje evidenc posameznih zaposlenih +
SELECT m.manager_id,
       m.manager_name,
       m.manager_surname,
       m.manager_address,
       m.manager_phone,
       m.manager_pay,
       m.manager_start_date,
       r.role_id
FROM manager m
JOIN role r ON m.role_id = r.role_id
WHERE r.role_id = 3;

--Posodabljanje evidenc posameznih zaposlenih +
UPDATE manager
SET manager_pay = 80000,
    manager_phone = '555 9999'
WHERE manager_id = 1 AND
      role_id = (SELECT role_id FROM role WHERE role_id = 2 );

--Navedemo vse zaposlene pod vsakim "vodjo urada" in "podpredsednikom" ---
SELECT sg.staff_group_id,
       m.manager_id,
       m.manager_name,
       m.manager_surname,
       r.role_id,
       s.staff_id,
       s.staff_name,
       s.staff_surname
FROM staff_group sg
JOIN manager m ON sg.manager_id = m.manager_id
JOIN role r ON m.role_id = r.role_id
JOIN staff s ON sg.staff_group_id = s.staff_group_id
WHERE r.role_id IN (3);

--Seznam delavcev v vsaki podružnici +
SELECT ob.office_branch_id,
       ob.office_city,
       ob.office_municipality,
       ob.office_postcode,
       sg.staff_group_id,
       m.manager_id,
       m.manager_name AS manager_first_name,
       m.manager_surname AS manager_last_name,
       s.staff_id,
       s.staff_name AS staff_first_name,
       s.staff_surname AS staff_last_name,
       s.staff_email,
       r.role_id
FROM office_branch ob
JOIN staff_group sg ON ob.staff_group_id = sg.staff_group_id
JOIN manager m ON sg.manager_id = m.manager_id
JOIN staff s ON sg.staff_group_id = s.staff_group_id
JOIN role r ON s.role_id = r.role_id
ORDER BY ob.office_branch_id, r.role_id, s.staff_name;

--Število delavcev v vsaki podružnici +
SELECT ob.office_branch_id,
       ob.office_city,
       COUNT(s.staff_id) AS total_workers
FROM office_branch ob
JOIN staff_group sg ON ob.staff_group_id = sg.staff_group_id
JOIN staff s ON sg.staff_group_id = s.staff_group_id
GROUP BY ob.office_branch_id, ob.office_city
ORDER BY total_workers DESC;

--Povprečna plača delavcev v posamezni panogi +
SELECT ob.office_branch_id,
       ob.office_city,
       AVG(s.staff_pay) AS average_salary
FROM office_branch ob
JOIN staff_group sg ON ob.staff_group_id = sg.staff_group_id
JOIN staff s ON sg.staff_group_id = s.staff_group_id
GROUP BY ob.office_branch_id, ob.office_city
ORDER BY average_salary DESC;

--Podatki o delavcih z njihovimi vlogami v vsaki podružnici +
SELECT ob.office_branch_id,
       ob.office_city,
       s.staff_id,
       s.staff_name,
       s.staff_surname,
       s.staff_email,
       r.role_id
FROM office_branch ob
JOIN staff_group sg ON ob.staff_group_id = sg.staff_group_id
JOIN staff s ON sg.staff_group_id = s.staff_group_id
JOIN role r ON s.role_id = r.role_id
ORDER BY ob.office_branch_id, r.role_id, s.staff_name;

--Porazdelitev plač po panogah +
SELECT ob.office_branch_id,
       ob.office_city,
       s.staff_name,
       s.staff_surname,
       s.staff_pay
FROM office_branch ob
JOIN staff_group sg ON ob.staff_group_id = sg.staff_group_id
JOIN staff s ON sg.staff_group_id = s.staff_group_id
ORDER BY ob.office_branch_id, s.staff_pay DESC;

--Podrobno poročilo za določeno podružnico +
SELECT ob.office_branch_id,
       ob.office_city,
       ob.office_municipality,
       ob.office_postcode,
       m.manager_name AS manager_first_name,
       m.manager_surname AS manager_last_name,
       r.role_id,
       s.staff_id,
       s.staff_name AS staff_first_name,
       s.staff_surname AS staff_last_name,
       s.staff_email,
       s.staff_pay,
       s.staff_start_date
FROM office_branch ob
JOIN staff_group sg ON ob.staff_group_id = sg.staff_group_id
JOIN manager m ON sg.manager_id = m.manager_id
JOIN staff s ON sg.staff_group_id = s.staff_group_id
JOIN role r ON s.role_id = r.role_id
WHERE ob.office_branch_id = 1 -- Replace with the specific office_branch_id
ORDER BY s.staff_name;

--Seznam delavcev v skupini z njihovim vodjo +
SELECT
    sg.staff_group_id AS group_id,
    m.manager_id,
    CONCAT(m.manager_name, ' ', m.manager_surname) AS manager_full_name,
    s.staff_id,
    CONCAT(s.staff_name, ' ', s.staff_surname) AS staff_full_name,
    r.role_id AS staff_role
FROM
    staff_group sg
JOIN
    manager m ON sg.manager_id = m.manager_id
JOIN
    staff s ON sg.staff_group_id = s.staff_group_id
JOIN
    role r ON s.role_id = r.role_id
ORDER BY
    sg.staff_group_id, s.staff_name;

--Seznam nepremičnin, ki so na voljo za oddajo v najem, s podatki o lastniku in podatki o podružnici +
SELECT
    e.estate_id,
    e.estate_address,
    e.estate_city,
    e.estate_type,
    e.estate_bedrooms,
    e.estate_square_footage,
    e.estate_rent,
    o.owner_id,
    o.owner_name,
    ob.office_branch_id,
    ob.office_city,
    ob.office_municipality,
    ob.office_postcode
FROM
    estate e
JOIN
    owner o ON e.owner_id = o.owner_id
JOIN
    staff_group sg ON e.staff_group_id = sg.staff_group_id
JOIN
    office_branch ob ON sg.staff_group_id = ob.staff_group_id
WHERE
    e.estate_property = 'Residential'
ORDER BY
    ob.office_branch_id, e.estate_city, e.estate_address;

--Podrobno poročilo o nepremičninah za določeno podružnico +
SELECT
    e.estate_id,
    e.estate_address,
    e.estate_city,
    e.estate_type,
    e.estate_bedrooms,
    e.estate_square_footage,
    e.estate_rent,
    o.owner_id,
    o.owner_name,
    CONCAT(m.manager_name, ' ', m.manager_surname) AS manager_full_name
FROM
    estate e
JOIN
    owner o ON e.owner_id = o.owner_id
JOIN
    staff_group sg ON e.staff_group_id = sg.staff_group_id
JOIN
    office_branch ob ON sg.staff_group_id = ob.staff_group_id
JOIN
    manager m ON sg.manager_id = m.manager_id
WHERE
    e.estate_property = 'Residential'
    AND ob.office_branch_id = 1
ORDER BY
    e.estate_city, e.estate_address;

--iskanje in izdelava seznama vseh nepremičnin, ki so zadovoljujejo zahteve določene stranke +
SELECT *
FROM estate e
JOIN owner o ON e.owner_id = o.owner_id
WHERE e.estate_city = 'Somecity'
  AND e.estate_type = 'Apartment'
  AND e.estate_bedrooms >= 1
  AND e.estate_rent <= 2000;

-- izdelava poročila o komentarjih potencialnih strank glede določenega objekta
SELECT
    e.estate_id,
    e.estate_address,
    e.estate_type,
    e.estate_city,
    e.estate_square_footage,
    e.estate_rent,
    u.user_name_surname AS customer_name,
    i.interview_comments AS customer_comments
FROM
    estate e
JOIN
    interview i ON e.staff_group_id = i.staff_id
JOIN
    users u ON i.user_id = u.user_id
WHERE
    e.estate_id = 22;